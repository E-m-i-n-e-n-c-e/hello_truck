// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model Customer {
  id          String   @id @default(uuid())
  phoneNumber String   @unique
  firstName   String?
  lastName    String?
  email       String?
  isBusiness  Boolean  @default(false)
  referralCode String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sessions    CustomerSession[]
  gstDetails  CustomerGstDetails[]
}

model CustomerGstDetails {
  id              String      @id @default(uuid())
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id])
  gstNumber       String      @unique
  businessName    String
  businessAddress String
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([customerId, isActive])
  @@index([createdAt])
}

model CustomerSession {
  id          String   @id @default(uuid())
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  token       String   @unique
  oldToken    String?  @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([expiresAt])
}

model OtpVerification {
  id          String   @id @default(uuid())
  phoneNumber String
  otp         String
  retryCount  Int      @default(0)
  expiresAt   DateTime
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([phoneNumber, verified, expiresAt, createdAt])
  @@index([expiresAt])
}

model Driver {
  id          String   @id @default(uuid())
  phoneNumber String   @unique
  firstName   String?
  lastName    String?
  email       String?
  referalCode String?
  isActive    Boolean  @default(true)
  verificationStatus VerificationStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sessions    DriverSession[]
}

model DriverSession {
  id          String   @id @default(uuid())
  driverId    String
  driver      Driver   @relation(fields: [driverId], references: [id])
  token       String   @unique
  oldToken    String?  @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([expiresAt])
}
